'RI', 'SC', 'SD', 'TN', 'TX', 'UT', 'VT', 'VA', 'VA',
'VA', 'WA', 'WA', 'WA', 'WA', 'WA', 'WV', 'WI', 'WY')
rownames(log_df) <- log_df$state
map_clusters <- kmeans(log_df[map_order, 2:3], centers=4, nstart = 10, iter.max=100)
map_color <- map_clusters$cluster[map_order]
map_clusters
maps::map(database = 'state', col = map_color, fill = TRUE)
#ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_order <- c('AL', 'AZ', 'AR', 'CA', 'CO', 'CT', 'DE', 'DC', 'FL',
'GA', 'ID', 'IL', 'IN', 'IA', 'KS', 'KY', 'LA', 'ME',
'MD', 'MA', 'MI', 'MN', 'MS', 'MO', 'MT', 'NE', 'NV',
'NH', 'NJ', 'NM', 'NY', 'NC', 'ND', 'OH', 'OK', 'OR',
'PA', 'RI', 'SC', 'SD', 'TN', 'TX', 'UT', 'VT', 'VA',
'WA', 'WV', 'WI', 'WY')
rownames(log_df) <- log_df$state
map_clusters <- kmeans(log_df[map_order, 2:3], centers=4, nstart = 10, iter.max=100)
map_color <- map_clusters$cluster[map_order]
map_clusters
maps::map(database = 'state', col = map_color, fill = TRUE)
#ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_order <- c('AL', 'AZ', 'AR', 'CA', 'CO', 'CT', 'DE', 'DC', 'FL',
'GA', 'ID', 'IL', 'IN', 'IA', 'KS', 'KY', 'LA', 'ME',
'MD', 'MA', 'MI', 'MN', 'MS', 'MO', 'MT', 'NE', 'NV',
'NH', 'NJ', 'NM', 'NY', 'NC', 'ND', 'OH', 'OK', 'OR',
'PA', 'RI', 'SC', 'SD', 'TN', 'TX', 'UT', 'VT', 'VA',
'WA', 'WV', 'WI', 'WY')
rownames(log_df) <- log_df$state
map_clusters <- kmeans(log_df[map_order, 2:3], centers=4, nstart = 10, iter.max=100)
map_color <- map_clusters$cluster[map_order]
map_clusters
maps::map(database = 'state', col = map_color, fill = TRUE)
#ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_order <- c('AL', 'AZ', 'AR', 'CA', 'CO', 'CT', 'DE', 'DC', 'FL',
'GA', 'ID', 'IL', 'IN', 'IA', 'KS', 'KY', 'LA', 'ME',
'MD', 'MA', 'MA', 'MA', 'MI', 'MI', 'MN', 'MS', 'MO',
'MT', 'NE', 'NV', 'NH', 'NJ', 'NM', 'NY', 'NY', 'NY',
'NY', 'NC', 'NC', 'NC', 'ND', 'OH', 'OK', 'OR', 'PA',
'RI', 'SC', 'SD', 'TN', 'TX', 'UT', 'VT', 'VA', 'VA',
'VA', 'WA', 'WA', 'WA', 'WA', 'WA', 'WV', 'WI', 'WY')
rownames(log_df) <- log_df$state
map_clusters <- kmeans(log_df[map_order, 2:3], centers=4, nstart = 10, iter.max=100)
map_color <- map_clusters$cluster[map_order]
map_clusters
maps::map(database = 'state', col = map_color, fill = TRUE)
#ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_order <- c('AL', 'AZ', 'AR', 'CA', 'CO', 'CT', 'DE', 'DC', 'FL',
'GA', 'ID', 'IL', 'IN', 'IA', 'KS', 'KY', 'LA', 'ME',
'MD', 'MA', 'MA', 'MA', 'MI', 'MI', 'MN', 'MS', 'MO',
'MT', 'NE', 'NV', 'NH', 'NJ', 'NM', 'NY', 'NY', 'NY',
'NY', 'NC', 'NC', 'NC', 'ND', 'OH', 'OK', 'OR', 'PA',
'RI', 'SC', 'SD', 'TN', 'TX', 'UT', 'VT', 'VA', 'VA',
'VA', 'WA', 'WA', 'WA', 'WA', 'WA', 'WV', 'WI', 'WY')
rownames(log_df) <- log_df$state
map_clusters <- kmeans(log_df[map_order, 2:3], centers=4, nstart = 10, iter.max=100)
map_color <- map_clusters$cluster[map_order]
map_clusters
maps::map(database = 'state', col = map_color, fill = TRUE)
#ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_order <- c('AL', 'AZ', 'AR', 'CA', 'CO', 'CT', 'DE', 'DC', 'FL',
'GA', 'ID', 'IL', 'IN', 'IA', 'KS', 'KY', 'LA', 'ME',
'MD', 'MA', 'MA', 'MA', 'MI', 'MI', 'MN', 'MS', 'MO',
'MT', 'NE', 'NV', 'NH', 'NJ', 'NM', 'NY', 'NY', 'NY',
'NY', 'NC', 'NC', 'NC', 'ND', 'OH', 'OK', 'OR', 'PA',
'RI', 'SC', 'SD', 'TN', 'TX', 'UT', 'VT', 'VA', 'VA',
'VA', 'WA', 'WA', 'WA', 'WA', 'WA', 'WV', 'WI', 'WY')
rownames(log_df) <- log_df$state
map_clusters <- kmeans(log_df[map_order, 2:3], centers=4, nstart = 100, iter.max=100)
map_color <- map_clusters$cluster[map_order]
map_clusters
maps::map(database = 'state', col = map_color, fill = TRUE)
#ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_order <- c('AL', 'AZ', 'AR', 'CA', 'CO', 'CT', 'DE', 'DC', 'FL',
'GA', 'ID', 'IL', 'IN', 'IA', 'KS', 'KY', 'LA', 'ME',
'MD', 'MA', 'MA', 'MA', 'MI', 'MI', 'MN', 'MS', 'MO',
'MT', 'NE', 'NV', 'NH', 'NJ', 'NM', 'NY', 'NY', 'NY',
'NY', 'NC', 'NC', 'NC', 'ND', 'OH', 'OK', 'OR', 'PA',
'RI', 'SC', 'SD', 'TN', 'TX', 'UT', 'VT', 'VA', 'VA',
'VA', 'WA', 'WA', 'WA', 'WA', 'WA', 'WV', 'WI', 'WY')
rownames(log_df) <- log_df$state
map_clusters <- kmeans(log_df[map_order, 2:3], centers=4, nstart = 100, iter.max=100)
map_color <- map_clusters$cluster[map_order]
map_clusters
maps::map(database = 'state', col = map_color, fill = TRUE)
#ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_order <- c('AL', 'AZ', 'AR', 'CA', 'CO', 'CT', 'DE', 'DC', 'FL',
'GA', 'ID', 'IL', 'IN', 'IA', 'KS', 'KY', 'LA', 'ME',
'MD', 'MA', 'MA', 'MA', 'MI', 'MI', 'MN', 'MS', 'MO',
'MT', 'NE', 'NV', 'NH', 'NJ', 'NM', 'NY', 'NY', 'NY',
'NY', 'NC', 'NC', 'NC', 'ND', 'OH', 'OK', 'OR', 'PA',
'RI', 'SC', 'SD', 'TN', 'TX', 'UT', 'VT', 'VA', 'VA',
'VA', 'WA', 'WA', 'WA', 'WA', 'WA', 'WV', 'WI', 'WY')
rownames(log_df) <- log_df$state
map_clusters <- kmeans(log_df[map_order, 2:3], centers=4, nstart = 100, iter.max=100)
map_color <- map_clusters$cluster[map_order]
map_clusters
maps::map(database = 'state', col = map_color, fill = TRUE)
#ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_order <- c('AL', 'AZ', 'AR', 'CA', 'CO', 'CT', 'DE', 'DC', 'FL',
'GA', 'ID', 'IL', 'IN', 'IA', 'KS', 'KY', 'LA', 'ME',
'MD', 'MA', 'MA', 'MA', 'MI', 'MI', 'MN', 'MS', 'MO',
'MT', 'NE', 'NV', 'NH', 'NJ', 'NM', 'NY', 'NY', 'NY',
'NY', 'NC', 'NC', 'NC', 'ND', 'OH', 'OK', 'OR', 'PA',
'RI', 'SC', 'SD', 'TN', 'TX', 'UT', 'VT', 'VA', 'VA',
'VA', 'WA', 'WA', 'WA', 'WA', 'WA', 'WV', 'WI', 'WY')
rownames(log_df) <- log_df$state
map_clusters <- kmeans(log_df[map_order, 2:3], centers=4, nstart = 100, iter.max=100)
map_color <- map_clusters$cluster[map_order]
map_clusters
maps::map(database = 'state', col = map_color, fill = TRUE)
#ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_order <- c('AL', 'AZ', 'AR', 'CA', 'CO', 'CT', 'DE', 'DC', 'FL',
'GA', 'ID', 'IL', 'IN', 'IA', 'KS', 'KY', 'LA', 'ME',
'MD', 'MA', 'MA', 'MA', 'MI', 'MI', 'MN', 'MS', 'MO',
'MT', 'NE', 'NV', 'NH', 'NJ', 'NM', 'NY', 'NY', 'NY',
'NY', 'NC', 'NC', 'NC', 'ND', 'OH', 'OK', 'OR', 'PA',
'RI', 'SC', 'SD', 'TN', 'TX', 'UT', 'VT', 'VA', 'VA',
'VA', 'WA', 'WA', 'WA', 'WA', 'WA', 'WV', 'WI', 'WY')
rownames(log_df) <- log_df$state
map_clusters <- kmeans(log_df[map_order, 2:3], centers=4, nstart = 100, iter.max=100)
map_color <- map_clusters$cluster[map_order]
map_clusters
maps::map(database = 'state', col = map_color, fill = TRUE)
d <- dist(mydf[,2:3])
av_link = hclust(d, method = "average" )
plot(av_link, cex = 0.7, hang = -1, main = "Average linkage")
rect.hclust(av_link, k=5)
av_tree <- cutree(av_link, k = 5)
hclust_plot <- ggplot() + geom_point(mydf, mapping = aes(mean_household_income, mean_electricity_usage, colour=factor(av_tree)))
plot(hclust_plot + ggtitle("Hierarchical clastering. Average linkage"))
single_link = hclust(d, method = "single" )
plot(single_link, cex = 0.8, hang = -1, main = "Single linkage")
rect.hclust(single_link, k=5)
single_tree <- cutree(single_link, k = 5)
f <- ggplot() +
geom_point(mydf, mapping = aes(mean_household_income, mean_electricity_usage, colour=factor(single_tree)))
plot(f + ggtitle("Hierarchical clastering. Single linkage"))
?plot
single_link = hclust(d, method = "single" )
plot(single_link, cex = 2, hang = -1, main = "Single linkage")
rect.hclust(single_link, k=5)
single_tree <- cutree(single_link, k = 5)
f <- ggplot() +
geom_point(mydf, mapping = aes(mean_household_income, mean_electricity_usage, colour=factor(single_tree)))
plot(f + ggtitle("Hierarchical clastering. Single linkage"))
single_link = hclust(d, method = "single" )
plot(single_link, cex = 0.5, hang = -1, main = "Single linkage")
rect.hclust(single_link, k=5)
single_tree <- cutree(single_link, k = 5)
f <- ggplot() +
geom_point(mydf, mapping = aes(mean_household_income, mean_electricity_usage, colour=factor(single_tree)))
plot(f + ggtitle("Hierarchical clastering. Single linkage"))
single_link = hclust(d, method = "single" )
plot(single_link, cex = 0.5, hang = 2, main = "Single linkage")
rect.hclust(single_link, k=5)
single_tree <- cutree(single_link, k = 5)
f <- ggplot() +
geom_point(mydf, mapping = aes(mean_household_income, mean_electricity_usage, colour=factor(single_tree)))
plot(f + ggtitle("Hierarchical clastering. Single linkage"))
single_link = hclust(d, method = "single" )
plot(single_link, cex = 0.5, main = "Single linkage")
rect.hclust(single_link, k=5)
single_tree <- cutree(single_link, k = 5)
f <- ggplot() +
geom_point(mydf, mapping = aes(mean_household_income, mean_electricity_usage, colour=factor(single_tree)))
plot(f + ggtitle("Hierarchical clastering. Single linkage"))
single_link = hclust(d, method = "single" )
plot(single_link, cex = 0.5, hang=-1, main = "Single linkage")
rect.hclust(single_link, k=5)
single_tree <- cutree(single_link, k = 5)
f <- ggplot() +
geom_point(mydf, mapping = aes(mean_household_income, mean_electricity_usage, colour=factor(single_tree)))
plot(f + ggtitle("Hierarchical clastering. Single linkage"))
single_link = hclust(d, method = "single" )
plot(single_link, cex = 0.5, hang=-1, main = "Single linkage")
rect.hclust(single_link, k=5)
single_tree <- cutree(single_link, k = 5)
single_plot <- ggplot() + geom_point(mydf, mapping = aes(mean_household_income, mean_electricity_usage, colour=factor(single_tree)))
plot(single_plot + ggtitle("Hierarchical clastering. Single linkage"))
complete_link <- hclust(d, method = "complete" )
plot(complete_link, cex = 0.7, hang=-1, main = "Complete linkage")
rect.hclust(complete_link, k = 5, border = 2:5)
complete_tree <- cutree(complete_link, k = 5)
complete_plot <- ggplot() + geom_point(mydf, mapping = aes(mean_household_income, mean_electricity_usage, colour=factor(complete_tree)))
plot(complete_plot + ggtitle("Hierarchical clastering. Complete linkage"))
d <- dist(mydf[,2:3])
create_linkage <- function(my_method) {
linkage <- hclust(d, method = my_method )
plot(linkage, cex = 0.7, hang=-1, main = paste(my_method, " linkage", sep=" "))
rect.hclust(linkage, k = 5, border = 2:5)
cutted_tree <- cutree(linkage, k = 5)
link_plot <- ggplot() + geom_point(mydf, mapping = aes(mean_household_income, mean_electricity_usage, colour=factor(cutted_tree)))
plot(link_plot + ggtitle(paste("Hierarchical clastering. ", my_method, " linkage", sep=" ")))
}
create_linkage("average")
create_linkage("single")
create_linkage("complete")
d <- dist(log_df[,2:3])
complete_linkage <- hclust(d, method = "complete" )
complete_tree <- cutree(complete_linkage, k = 5)
plot(complete_linkage, cex = 0.7, main = "Complete linkage")
rect.hclust(complete_linkage, k = 5, border = 2:5)
d <- dist(log_df[,2:3])
complete_linkage <- hclust(d, method = "complete" )
plot(complete_linkage, cex = 0.7, main = "Complete linkage")
rect.hclust(complete_linkage, k = 5, border = 2:5)
d <- dist(log_df[,2:3])
res <- hclust(d, method = "complete" )
grp <- cutree(res, k = 5)
plot(res, cex = 0.7, main = "Complete linkage")
rect.hclust(res, k = 5, border = 2:5)
create_linkage("average", mydf, 0.7, -1)
create_linkage <- function(my_method, dataframe, cex, hang) {
d <- dist(dataframe[,2:3])
linkage <- hclust(d, method = my_method )
plot(linkage, cex = cex, hang=hang, main = paste(my_method, " linkage", sep=" "))
rect.hclust(linkage, k = 5, border = 2:5)
cutted_tree <- cutree(linkage, k = 5)
link_plot <- ggplot() + geom_point(mydf, mapping = aes(mean_household_income, mean_electricity_usage, colour=factor(cutted_tree)))
plot(link_plot + ggtitle(paste("Hierarchical clastering. ", my_method, " linkage", sep=" ")))
}
create_linkage(my_method="average", dataframe=mydf, cex=0.7, hang-1)
create_linkage(my_method="average", dataframe=mydf, cex=0.7, hang=-1)
create_linkage("single", dataframe=mydf, cex=0.7, hang=-1)
create_linkage("complete", dataframe=mydf, cex=0.7, hang=-1)
create_linkage(my_method="complete", dataframe=log_df, cex=0.7, hang=0)
create_linkage(my_method="complete", dataframe=log_df, cex=0.7, hang=1)
create_linkage(my_method="complete", dataframe=log_df, cex=0.7, hang=NA)
create_linkage(my_method="complete", dataframe=log_df, cex=0.7, hang=0.3)
gap_res <- clusGap(log_df[,2:3], FUN = hcut, nstart = 200,
K.max = 15, B = 50)
if (!require('cluster') & !require('factoextra'))
{
install.packages('cluster', 'factoextra', dependencies = TRUE)
library(cluster)
library(factoextra)
}
fviz_nbclust(log_df[,2:3], hcut, method = "wss")
fviz_nbclust(log_df[,2:3], hcut, method = "silhouette")
gap_res <- clusGap(log_df[,2:3], FUN = hcut, nstart = 200,
K.max = 15, B = 50)
fviz_gap_stat(gap_res)
fviz_cluster(list(cluster = grp, data = log_df[,2:3]))
grp <- cutree(res, k = 1)
fviz_cluster(list(cluster=grp, data = log_df[,2:3]))
plot_gap_k <- function(knum)
{
d <- dist(log_df[,2:3])
res <- hclust(d, method = "complete" )
grp <- cutree(res, k = knum)
fviz_cluster(list(cluster = grp, data = log_df[,2:3]))
}
plot_gap_k(5)
plot_gap_k(1)
plot_gap_k(9)
knitr::opts_chunk$set(echo = TRUE)
load(url("https://hyper.mephi.ru/assets/courseware/v1/1978112250dbe5fdecb6fd2c07809240/asset-v1:MEPhIx+CS712DS+2020Fall+type@asset+block/income_elec_state.Rdata"))
income_elec_state <- cbind(rownames(income_elec_state), income_elec_state)
mydf <- setNames(income_elec_state, c("state", "mean_household_income", "mean_electricity_usage"))
#rownames(mydf) <- NULL
head(mydf)
if (!require('ggplot2'))
{
install.packages('ggplot2', dependencies = TRUE)
library('ggplot2')
}
clusters <- kmeans(mydf[,2:3], centers = 10, iter.max = 100, nstart = 200 )
clusters_plot <- ggplot() + geom_point(mydf, mapping=aes(x=mean_household_income, y=mean_electricity_usage, colour=factor(clusters$cluster)), shape=1) + geom_point(mapping = aes(clusters$centers[,1], clusters$centers[,2], size=1), shape=8, size=2)
plot(clusters_plot)
plot(clusters_plot + geom_text(mydf, mapping = aes(mean_household_income, mean_electricity_usage, label = state)))
for (suggested_k in c(1:10)) {
s_clusters <- kmeans(mydf[,2:3], centers = suggested_k, iter.max = 100, nstart = 200 )
s_clusters_plot <- ggplot() + geom_point(mydf, mapping=aes(x=mean_household_income, y=mean_electricity_usage, colour=factor(s_clusters$cluster)), shape=1) + geom_point(mapping = aes(s_clusters$centers[,1], s_clusters$centers[,2], size=1))
plot(s_clusters_plot)
}
total_withinss <- function(k, dataf) {
cluster <- kmeans(dataf[2:3], k, nstart=100, iter.max = 100)
return (cluster$tot.withinss)
}
plot_elbow <- function(dataframe, max_cluster) {
wss <- sapply(2:max_cluster, total_withinss, dataf=dataframe)
elbow <-data.frame(max_cluster=2:max_cluster, wss=wss)
ggplot(elbow, aes(x = max_cluster, y = wss)) +
geom_point() +
geom_line() + scale_x_continuous(breaks=seq(2, max_cluster, 1)) + labs(title = "Elbow method\n", x = "number of clusters", y = "Total within-clusters sum of square")
}
plot_elbow(mydf, 15)
log_income <- log10(mydf$mean_household_income)
log_elec <- log10(mydf$mean_electricity_usage)
log_df <- data.frame(state=mydf$state, income=log_income, elec=log_elec)
head(log_df)
log_clusters <- kmeans(log_df[2:3], 5, nstart = 50, iter.max=100)
log_plt <- ggplot() + geom_point(log_df, mapping = aes(income, elec, colour=factor(log_clusters$cluster)))
plot(log_plt + geom_text(log_df, mapping = aes(income, elec, label = state)))
plot_elbow(log_df, 20)
cleaned_df <- log_df[log_df$state != 'PR', ]
plot_elbow(cleaned_df, 20)
if (!require('maps'))
{
install.packages('maps', dependencies = TRUE)
library('maps')
}
#ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_order <- c('AL', 'AZ', 'AR', 'CA', 'CO', 'CT', 'DE', 'DC', 'FL',
'GA', 'ID', 'IL', 'IN', 'IA', 'KS', 'KY', 'LA', 'ME',
'MD', 'MA', 'MA', 'MA', 'MI', 'MI', 'MN', 'MS', 'MO',
'MT', 'NE', 'NV', 'NH', 'NJ', 'NM', 'NY', 'NY', 'NY',
'NY', 'NC', 'NC', 'NC', 'ND', 'OH', 'OK', 'OR', 'PA',
'RI', 'SC', 'SD', 'TN', 'TX', 'UT', 'VT', 'VA', 'VA',
'VA', 'WA', 'WA', 'WA', 'WA', 'WA', 'WV', 'WI', 'WY')
rownames(log_df) <- log_df$state
map_clusters <- kmeans(log_df[map_order, 2:3], centers=4, nstart = 100, iter.max=100)
map_color <- map_clusters$cluster[map_order]
map_clusters
maps::map(database = 'state', col = map_color, fill = TRUE)
create_linkage <- function(my_method, dataframe, cex, hang) {
d <- dist(dataframe[,2:3])
linkage <- hclust(d, method = my_method )
plot(linkage, cex = cex, hang=hang, main = paste(my_method, " linkage", sep=" "))
rect.hclust(linkage, k = 5, border = 2:5)
cutted_tree <- cutree(linkage, k = 5)
link_plot <- ggplot() + geom_point(mydf, mapping = aes(mean_household_income, mean_electricity_usage, colour=factor(cutted_tree)))
plot(link_plot + ggtitle(paste("Hierarchical clastering. ", my_method, " linkage", sep=" ")))
}
create_linkage(my_method="average", dataframe=mydf, cex=0.7, hang=-1)
create_linkage(my_method="single", dataframe=mydf, cex=0.7, hang=-1)
create_linkage(my_method="complete", dataframe=mydf, cex=0.7, hang=-1)
create_linkage(my_method="complete", dataframe=log_df, cex=0.7, hang=0.3)
if (!require('cluster') & !require('factoextra'))
{
install.packages('cluster', 'factoextra', dependencies = TRUE)
library(cluster)
library(factoextra)
}
fviz_nbclust(log_df[,2:3], hcut, method = "wss")
fviz_nbclust(log_df[,2:3], hcut, method = "silhouette")
gap_res <- clusGap(log_df[,2:3], FUN = hcut, nstart = 200,
K.max = 15, B = 50)
fviz_gap_stat(gap_res)
plot_gap_k <- function(knum)
{
d <- dist(log_df[,2:3])
res <- hclust(d, method = "complete" )
grp <- cutree(res, k = knum)
fviz_cluster(list(cluster = grp, data = log_df[,2:3]))
}
plot_gap_k(5)
plot_gap_k(1)
plot_gap_k(9)
?read.transactions
??read.transactions
knitr::opts_chunk$set(echo = TRUE)
order_trans <- read.transactions(
file = load(url("https://hyper.mephi.ru/assets/courseware/v1/4528e593d5d574a075e15cab1da2383b/asset-v1:MEPhIx+CS712DS+2020Fall+type@asset+block/AssociationRules.csv")),
format = "basket",
sep = " ",
cols=c("transactionID","item"),
rm.duplicates = T
)
order_trans <- read.transactions(
file = "https://hyper.mephi.ru/assets/courseware/v1/4528e593d5d574a075e15cab1da2383b/asset-v1:MEPhIx+CS712DS+2020Fall+type@asset+block/AssociationRules.csv",
format = "basket",
sep = " ",
cols=c("transactionID","item"),
rm.duplicates = T
)
if (!require('ggplot2'))
{
install.packages('ggplot2', dependencies = TRUE)
library('ggplot2')
}
if (!require('arules'))
{
install.packages('arules', dependencies = TRUE)
library('arules')
}
if (!require('arulesViz'))
{
install.packages('arulesViz', dependencies = TRUE)
library('arulesViz')
}
order_trans <- read.transactions(
file = "https://hyper.mephi.ru/assets/courseware/v1/4528e593d5d574a075e15cab1da2383b/asset-v1:MEPhIx+CS712DS+2020Fall+type@asset+block/AssociationRules.csv",
format = "basket",
sep = " ",
cols=c("transactionID","item"),
rm.duplicates = T
)
order_trans <- read.transactions(
file = "https://hyper.mephi.ru/assets/courseware/v1/4528e593d5d574a075e15cab1da2383b/asset-v1:MEPhIx+CS712DS+2020Fall+type@asset+block/AssociationRules.csv",
format = "basket",
sep = " ",
rm.duplicates = T
)
summary(order_trans)
order_trans <- read.transactions(
file = "https://hyper.mephi.ru/assets/courseware/v1/4528e593d5d574a075e15cab1da2383b/asset-v1:MEPhIx+CS712DS+2020Fall+type@asset+block/AssociationRules.csv",
format = "basket",
sep = " ",
rm.duplicates = T
)
summary(order_trans)
transact_data <- read.transactions(
file = "https://hyper.mephi.ru/assets/courseware/v1/4528e593d5d574a075e15cab1da2383b/asset-v1:MEPhIx+CS712DS+2020Fall+type@asset+block/AssociationRules.csv",
format = "basket",
sep = " ",
rm.duplicates = TRUE
)
summary(transact_data)
?arules
??arules
?itemFrequency
itemFrequency(transact_data, type = "relative")
itemFrequency(transact_data, type = "absolute")
itemFrequency(transact_data, type = "absolute")
itemFrequency(transact_data, type = "relative")
fr_table <- itemFrequency(transact_data, type = "absolute")
fr_table
View(transact_data)
fr_table <- itemFrequency(transact_data, type = "absolute")
plot(fr_table)
fr_table <- itemFrequency(transact_data, type = "absolute")
itemFrequencyPlot(fr_table)
fr_table <- itemFrequency(transact_data, type = "absolute")
itemFrequencyPlot(transact_data)
fr_table <- itemFrequency(transact_data, type = "absolute")
itemFrequencyPlot(transact_data, topN=20)
fr_table <- itemFrequency(transact_data, type = "absolute")
itemFrequencyPlot(transact_data, topN=15)
fr_table <- itemFrequency(transact_data, type = "absolute")
itemFrequencyPlot(transact_data, type="absolute" topN=15)
fr_table <- itemFrequency(transact_data, type = "absolute")
itemFrequencyPlot(transact_data, type="absolute", topN=15)
itemFrequency(transact_data, type = "absolute", topN=15)
itemFrequency(transact_data, type = "absolute")
itemFrequencyPlot(transact_data, type="absolute", topN=15)
itemFrequency(transact_data, type = "absolute")
itemFrequencyPlot(transact_data, type="absolute", topN=15)
knitr::opts_chunk$set(echo = TRUE)
if (!require('ggplot2'))
{
install.packages('ggplot2', dependencies = TRUE)
library('ggplot2')
}
if (!require('arules'))
{
install.packages('arules', dependencies = TRUE)
library('arules')
}
if (!require('arulesViz'))
{
install.packages('arulesViz', dependencies = TRUE)
library('arulesViz')
}
transact_data <- read.transactions(
file = "https://hyper.mephi.ru/assets/courseware/v1/4528e593d5d574a075e15cab1da2383b/asset-v1:MEPhIx+CS712DS+2020Fall+type@asset+block/AssociationRules.csv",
format = "basket",
sep = " ",
rm.duplicates = TRUE
)
summary(transact_data)
itemFrequency(transact_data, type = "absolute")
itemFrequencyPlot(transact_data, type="absolute", topN=15)
max(size(transact_data))
rules1 <- apriori(transact_data, parameter = list(supp = 0.01, conf = 0.0))
summary(rules1)
rules2 <- apriori(transact_data, parameter = list(supp = 0.01, conf = 0.5))
summary(rules2)
plot(rules_0_1, measure = c('support', 'confidence'), shading = 'lift')
rules_0_1 <- apriori(transact_data, parameter = list(supp = 0.01, conf = 0.0, target = "rules"))
rules_50_1 <- apriori(transact_data, parameter = list(supp = 0.01, conf = 0.5, target = "rules"))
plot(rules_0_1, measure = c('support', 'confidence'), shading = 'lift')
cat("For sup=1% & conf=0%: ", length(rules_0_1), "\n")
cat("For sup=1% & conf=50%: ", length(rules_50_1), "\n")
plot(rules_50_1, measure = c('support', 'confidence'), shading = 'lift')
plot(rules_0_1, measure = c('support', 'confidence'), shading = 'lift')
plot(rules_50_1, measure = c('support', 'confidence'), shading = 'lift')
plot(rules_50_1, measure = c('support', 'confidence'), shading = 'lift', jitter = 0)
plot(rules_50_1, measure = c('support', 'confidence'), shading = 'lift')
plot(rules_50_1, measure = c('support', 'confidence'), shading = 'lift', jitter = 0)
plot(rules_50_1, measure = c('support', 'lift'), shading = 'confidence', jitter = 0)
inspect(rules_50_1)
inspect(rules_50_1[1:10])
inspect(rules_50_1[3])
inspect(rules_50_1[1:3])
inspect(head(rules_50_1, n = 3, by = 'lift'))
inspect(rules_50_1)
rules13 = subset(rules_50_1, items %in% c("item13"))
inspect(sort(rules13, by = "lift")[1:10])
rules13 = subset(rules_50_1, items %in% c("item13"))
inspect(sort(rules13, by = "lift")[1:10], n=2)
plot(rules_50_1, method = "scatterplot", measure = c('support', 'lift'), shading = 'confidence', jitter = 0, interactive = TRUE)
plot(rules_50_1, method = "scatterplot", measure = c('support', 'lift'), shading = 'confidence', jitter = 0, engine='interactive')
plot(rules_50_1, method = "scatterplot", measure = c('support', 'lift'), shading = 'confidence', jitter = 0, interactive = TRUE)
knitr::opts_chunk$set(echo = TRUE)
res <- merge(union_dt_1, union_dt_2)
transact_data <- read.transactions(
file = "https://hyper.mephi.ru/assets/courseware/v1/4528e593d5d574a075e15cab1da2383b/asset-v1:MEPhIx+CS712DS+2020Fall+type@asset+block/AssociationRules.csv",
format = "basket",
sep = " ",
rm.duplicates = TRUE
)
summary(transact_data)
training_data <- transact_data[1:8000,]
test_data <- transact_data[8001:10000,]
training_rules <- apriori(training_data, parameter = list(supp = 0.01, conf = 0.1))
test_rules <- apriori(test_data, parameter = list(supp = 0.01, conf = 0.1))
union_dt_1 <- DATAFRAME(intersect(training_rules, test_rules))
union_dt_2 <- DATAFRAME(intersect(test_rules, training_rules))
names(union_dt_1) <- c("LHS","RHS","support_test","confidence_test","coverage_test","lift_test", "count_test")
res <- merge(union_dt_1, union_dt_2)
head(res[c('LHS', 'RHS', 'support', 'support_test', 'confidence', 'confidence_test')], n=10)
summary(res[c('support', 'support_test', 'confidence', 'confidence_test')])
