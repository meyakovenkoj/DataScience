maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
rownames(log_df) <- log_df$state
map_clusters <- kmeans(log_df[state != ban_list, 2:3], centers=4, nstart = 100, iter.max=100)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 100, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 100, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 100, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 100, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 100, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 100, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 100, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 100, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 100, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 100, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 100, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 100, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 100, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 100, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 100, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 100, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 100, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 100, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 100, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 100, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 100, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 100, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 100, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 100, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 100, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 100, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 100, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 100, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 100, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 100, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 100, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 100, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 100, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 100, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 100, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 100, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 100, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 100, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 100, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 25, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 25, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 25, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 25, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 25, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 1, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 1, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 1, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 1, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 1, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 1, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 1, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 10, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 10, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 10, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 10, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 10, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 10, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 10, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 10, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 10, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 10, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 10, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 10, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 10, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 10, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 10, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 10, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 10, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 10, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE, namefield = log_df$state)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 10, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE, namefield = log_df$state)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 10, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE, namesonly = log_df$state)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 10, iter.max=100)
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 10, iter.max=100)
map_clusters
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
d <- dist(df[, 2:3])
hc1 <- hclust(d, method = 'complete')
plot(hc1, cex=0.75)
rect.hclust(hc1, k = 5)
dst <- dist(mydf[, 2:3])
hier_clst <- hclust(dst, method = 'complete')
plot(hier_clst, cex=0.75)
rect.hclust(hier_clst, k = 5)
`rownames<-`(mydf, mydf$states)
dst <- dist(mydf[, 2:3])
hier_clst <- hclust(dst, method = 'complete')
plot(hier_clst, cex=0.75)
rect.hclust(hier_clst, k = 5)
View(df)
View(df)
View(mydf)
View(mydf)
rownames(mydf) <- mydf$states
dst <- dist(mydf[, 2:3])
hier_clst <- hclust(dst, method = 'complete')
plot(hier_clst, cex=0.75)
rect.hclust(hier_clst, k = 5)
View(mydf)
load(url("https://hyper.mephi.ru/assets/courseware/v1/1978112250dbe5fdecb6fd2c07809240/asset-v1:MEPhIx+CS712DS+2020Fall+type@asset+block/income_elec_state.Rdata"))
income_elec_state <- cbind(rownames(income_elec_state), income_elec_state)
mydf <- setNames(income_elec_state, c("state", "mean_household_income", "mean_electricity_usage"))
#rownames(mydf) <- NULL
head(mydf)
rownames(mydf) <- mydf$states
dst <- dist(mydf[, 2:3])
hier_clst <- hclust(dst, method = 'complete')
plot(hier_clst, cex=0.75)
rect.hclust(hier_clst, k = 5)
load(url("https://hyper.mephi.ru/assets/courseware/v1/1978112250dbe5fdecb6fd2c07809240/asset-v1:MEPhIx+CS712DS+2020Fall+type@asset+block/income_elec_state.Rdata"))
income_elec_state <- cbind(rownames(income_elec_state), income_elec_state)
mydf <- setNames(income_elec_state, c("state", "mean_household_income", "mean_electricity_usage"))
#rownames(mydf) <- NULL
head(mydf)
log_clusters <- kmeans(log_df[2:3], 5, nstart = 50, iter.max=100)
log_plt <- ggplot() + geom_point(log_df, mapping = aes(income, elec, colour=factor(log_clusters$cluster)))
plot(log_plt)
log_clusters <- kmeans(log_df[2:3], 5, nstart = 50, iter.max=100)
log_plt <- ggplot() + geom_point(log_df, mapping = aes(income, elec, colour=factor(log_clusters$cluster)))
plot(log_plt + geom_text(log_df, mapping = aes(income, elec, label = state)))
map_order <- c('AL', 'AZ', 'AR', 'CA', 'CO', 'CT', 'DE', 'DC', 'FL',
'GA', 'ID', 'IL', 'IN', 'IA', 'KS', 'KY', 'LA', 'ME',
'MD', 'MA', 'MI',  'MN', 'MS', 'MO',
'MT', 'NE', 'NV', 'NH', 'NJ', 'NM', 'NY',
'NY', 'NC', 'ND', 'OH', 'OK', 'OR', 'PA',
'RI', 'SC', 'SD', 'TN', 'TX', 'UT', 'VT',
'VA', 'WA',  'WV', 'WI', 'WY')
rownames(df) <- df$state
clusters <- kmeans(df[map_order, 4:5], 4, nstart = 25, iter.max=100)
map_color <- clusters$cluster
map_color
library(maps)
maps::map('state', col = map_color, fill = TRUE)
#rownames(mydf) <- mydf$states
dst <- dist(mydf[, 2:3])
hier_clst <- hclust(dst, method = 'complete')
plot(hier_clst, cex=0.75)
rect.hclust(hier_clst, k = 5)
knitr::opts_chunk$set(echo = TRUE)
d <- dist(df[,1:2])
average= hclust(d, method = "average" )
plot(average, cex = 0.7, hang = -1, main = "Average linkage")
rect.hclust(average, k=5)
average_tree <- cutree(average, k = 5)
f <- ggplot() +
geom_point(df, mapping = aes(mean_household_income, mean_electricity_usage, colour=factor(average_tree)))
plot(f + ggtitle("Hierarchical clastering. Average linkage"))
single = hclust(d, method = "single" )
plot(single, cex = 0.7, hang = -1, main = "Single linkage")
rect.hclust(single, k=5)
single_tree <- cutree(single, k = 5)
f <- ggplot() +
geom_point(df, mapping = aes(mean_household_income, mean_electricity_usage, colour=factor(single_tree)))
plot(f + ggtitle("Hierarchical clastering. Single linkage"))
hcd <- as.dendrogram(hclust(d, method = "ward.D2" ))
nodePar <- list(lab.cex = 0.7, pch = c(NA, 19), cex = 0.7, col = "blue")
plot(hcd,  xlab = "Height", nodePar = nodePar, horiz = TRUE,
edgePar = list(col = 2:3, lwd = 2:1), main = "Ward linkage")
res <- hclust(d, method = "complete" )
grp <- cutree(res, k = 5)
plot(res, cex = 0.7, main = "Complete linkage")
rect.hclust(res, k = 5, border = 2:5)
f <- ggplot() +
geom_point(df, mapping = aes(mean_household_income, mean_electricity_usage, colour=factor(grp)))
plot(f + ggtitle("Hierarchical clastering. Complete linkage"))
d <- dist(df[,4:5])
res <- hclust(d, method = "complete" )
grp <- cutree(res, k = 5)
plot(res, cex = 0.7, main = "Complete linkage")
rect.hclust(res, k = 5, border = 2:5)
#library(factoextra)
fviz_nbclust(df[,4:5], hcut, method = "wss")
basic <- cutree(hc1, k = 5)
f <- ggplot()
f1 <- f +
geom_point(df, mapping = aes(mean_household_income, mean_electricity_usage, colour=factor(basic)))
plot(f1 + ggtitle("Hierarchical clastering"))
d_log <- dist(df[, 4:5])
hc2 <- hclust(d_log, method = 'complete')
plot(hc2, cex=0.75)
rect.hclust(hc2, k=5)
complete <- cutree(hc2, k = 5)
f <- ggplot()
f1 <- f +
geom_point(df, mapping = aes(mean_household_income, mean_electricity_usage, colour=factor(complete)))
plot(f1 + ggtitle("Hierarchical clastering with complete linkage"))
hc2_average = hclust(d_log, method = 'average')
plot(hc2_average, cex=0.75)
rect.hclust(hc2_average, k = 5)
av <- cutree(hc2_average, k = 5)
f <- ggplot()
f1 <- f +
geom_point(df, mapping = aes(mean_household_income, mean_electricity_usage, colour=factor(av)))
plot(f1 + ggtitle("Hierarchical clastering with average linkage"))
hc2_single = hclust(d_log, method = 'single')
plot(hc2_single, cex=0.75)
single <- cutree(hc2_single, k = 7)
f <- ggplot()
f1 <- f +
geom_point(df, mapping = aes(mean_household_income, mean_electricity_usage, colour=factor(single)))
plot(f1 + ggtitle("Hierarchical clastering with single linkage"))
opt <- cutree(hc2, k = 9)
fviz_cluster(list(data = df[4:5], cluster = opt))
d <- dist(mydf[,2:3])
average= hclust(d, method = "average" )
plot(average, cex = 0.7, hang = -1, main = "Average linkage")
rect.hclust(average, k=5)
average_tree <- cutree(average, k = 5)
f <- ggplot() +
geom_point(df, mapping = aes(mean_household_income, mean_electricity_usage, colour=factor(average_tree)))
plot(f + ggtitle("Hierarchical clastering. Average linkage"))
single = hclust(d, method = "single" )
plot(single, cex = 0.7, hang = -1, main = "Single linkage")
rect.hclust(single, k=5)
single_tree <- cutree(single, k = 5)
f <- ggplot() +
geom_point(df, mapping = aes(mean_household_income, mean_electricity_usage, colour=factor(single_tree)))
plot(f + ggtitle("Hierarchical clastering. Single linkage"))
hcd <- as.dendrogram(hclust(d, method = "ward.D2" ))
nodePar <- list(lab.cex = 0.7, pch = c(NA, 19), cex = 0.7, col = "blue")
plot(hcd,  xlab = "Height", nodePar = nodePar, horiz = TRUE,
edgePar = list(col = 2:3, lwd = 2:1), main = "Ward linkage")
res <- hclust(d, method = "complete" )
grp <- cutree(res, k = 5)
plot(res, cex = 0.7, main = "Complete linkage")
rect.hclust(res, k = 5, border = 2:5)
f <- ggplot() +
geom_point(df, mapping = aes(mean_household_income, mean_electricity_usage, colour=factor(grp)))
plot(f + ggtitle("Hierarchical clastering. Complete linkage"))
d <- dist(df[,4:5])
res <- hclust(d, method = "complete" )
grp <- cutree(res, k = 5)
plot(res, cex = 0.7, main = "Complete linkage")
rect.hclust(res, k = 5, border = 2:5)
d <- dist(log_df[,3:4])
d <- dist(log_df[,2:3])
res <- hclust(d, method = "complete" )
grp <- cutree(res, k = 5)
plot(res, cex = 0.7, main = "Complete linkage")
rect.hclust(res, k = 5, border = 2:5)
if (!require('cluster') & !require('factoextra'))
{
install.packages('cluster', 'factoextra', dependencies = TRUE)
library(cluster)
library(factoextra)
}
fviz_nbclust(df[,4:5], hcut, method = "wss")
fviz_nbclust(df[,4:5], hcut, method = "silhouette")
gap_stat <- clusGap(log_df[,2:3], FUN = hcut, nstart = 200,
K.max = 20, B = 50)
fviz_gap_stat(gap_stat)
fviz_cluster(list(cluster = grp, data = log_df[,2:3]))
grp <- cutree(res, k = 1)
fviz_cluster(list(cluster=grp, data = log_df[,2:3]))
grp <- cutree(res, k = 9)
fviz_cluster(list(cluster=grp, data = log_df[,2:3]))
knitr::opts_chunk$set(echo = TRUE)
d <- dist(mydf[,2:3])
knitr::opts_chunk$set(echo = TRUE)
load(url("https://hyper.mephi.ru/assets/courseware/v1/1978112250dbe5fdecb6fd2c07809240/asset-v1:MEPhIx+CS712DS+2020Fall+type@asset+block/income_elec_state.Rdata"))
income_elec_state <- cbind(rownames(income_elec_state), income_elec_state)
mydf <- setNames(income_elec_state, c("state", "mean_household_income", "mean_electricity_usage"))
#rownames(mydf) <- NULL
head(mydf)
if (!require('ggplot2'))
{
install.packages('ggplot2', dependencies = TRUE)
library('ggplot2')
}
clusters <- kmeans(mydf[,2:3], centers = 10, iter.max = 100, nstart = 200 )
clusters_plot <- ggplot() + geom_point(mydf, mapping=aes(x=mean_household_income, y=mean_electricity_usage, colour=factor(clusters$cluster)), shape=1) + geom_point(mapping = aes(clusters$centers[,1], clusters$centers[,2], size=1), shape=8, size=2)
plot(clusters_plot)
plot(clusters_plot + geom_text(mydf, mapping = aes(mean_household_income, mean_electricity_usage, label = state)))
for (suggested_k in c(1:10)) {
s_clusters <- kmeans(mydf[,2:3], centers = suggested_k, iter.max = 100, nstart = 200 )
s_clusters_plot <- ggplot() + geom_point(mydf, mapping=aes(x=mean_household_income, y=mean_electricity_usage, colour=factor(s_clusters$cluster)), shape=1) + geom_point(mapping = aes(s_clusters$centers[,1], s_clusters$centers[,2], size=1))
plot(s_clusters_plot)
}
total_withinss <- function(k, dataf) {
cluster <- kmeans(dataf[2:3], k, nstart=100, iter.max = 100)
return (cluster$tot.withinss)
}
plot_elbow <- function(dataframe, max_cluster) {
wss <- sapply(2:max_cluster, total_withinss, dataf=dataframe)
elbow <-data.frame(max_cluster=2:max_cluster, wss=wss)
ggplot(elbow, aes(x = max_cluster, y = wss)) +
geom_point() +
geom_line() + scale_x_continuous(breaks=seq(2, max_cluster, 1)) + labs(title = "Elbow method\n", x = "number of clusters", y = "Total within-clusters sum of square")
}
plot_elbow(mydf, 15)
log_income <- log10(mydf$mean_household_income)
log_elec <- log10(mydf$mean_electricity_usage)
log_df <- data.frame(state=mydf$state, income=log_income, elec=log_elec)
head(log_df)
log_clusters <- kmeans(log_df[2:3], 5, nstart = 50, iter.max=100)
log_plt <- ggplot() + geom_point(log_df, mapping = aes(income, elec, colour=factor(log_clusters$cluster)))
plot(log_plt + geom_text(log_df, mapping = aes(income, elec, label = state)))
plot_elbow(log_df, 20)
cleaned_df <- log_df[log_df$state != 'PR', ]
plot_elbow(cleaned_df, 20)
if (!require('maps'))
{
install.packages('maps', dependencies = TRUE)
library('maps')
}
ban_list <- c('AK', 'HI', 'PR', 'VI', 'AS')
map_clusters <- kmeans(log_df[!log_df$state %in% ban_list, 2:3], centers=4, nstart = 10, iter.max=100)
map_clusters
maps::map(database = 'state', col = map_clusters$cluster, fill = TRUE)
d <- dist(mydf[,2:3])
average= hclust(d, method = "average" )
plot(average, cex = 0.7, hang = -1, main = "Average linkage")
rect.hclust(average, k=5)
average_tree <- cutree(average, k = 5)
ff <- ggplot() +
geom_point(df, mapping = aes(mean_household_income, mean_electricity_usage, colour=factor(average_tree)))
plot(ff + ggtitle("Hierarchical clastering. Average linkage"))
d <- dist(mydf[,2:3])
average= hclust(d, method = "average" )
plot(average, cex = 0.7, hang = -1, main = "Average linkage")
rect.hclust(average, k=5)
average_tree <- cutree(average, k = 5)
ff <- ggplot() +
geom_point(mydf, mapping = aes(mean_household_income, mean_electricity_usage, colour=factor(average_tree)))
plot(ff + ggtitle("Hierarchical clastering. Average linkage"))
single = hclust(d, method = "single" )
plot(single, cex = 0.7, hang = -1, main = "Single linkage")
rect.hclust(single, k=5)
single_tree <- cutree(single, k = 5)
f <- ggplot() +
geom_point(mydf, mapping = aes(mean_household_income, mean_electricity_usage, colour=factor(single_tree)))
plot(f + ggtitle("Hierarchical clastering. Single linkage"))
hcd <- as.dendrogram(hclust(d, method = "ward.D2" ))
nodePar <- list(lab.cex = 0.7, pch = c(NA, 19), cex = 0.7, col = "blue")
plot(hcd,  xlab = "Height", nodePar = nodePar, horiz = TRUE,
edgePar = list(col = 2:3, lwd = 2:1), main = "Ward linkage")
res <- hclust(d, method = "complete" )
grp <- cutree(res, k = 5)
plot(res, cex = 0.7, main = "Complete linkage")
rect.hclust(res, k = 5, border = 2:5)
f <- ggplot() +
geom_point(mydf, mapping = aes(mean_household_income, mean_electricity_usage, colour=factor(grp)))
plot(f + ggtitle("Hierarchical clastering. Complete linkage"))
d <- dist(log_df[,2:3])
res <- hclust(d, method = "complete" )
grp <- cutree(res, k = 5)
plot(res, cex = 0.7, main = "Complete linkage")
rect.hclust(res, k = 5, border = 2:5)
if (!require('cluster') & !require('factoextra'))
{
install.packages('cluster', 'factoextra', dependencies = TRUE)
library(cluster)
library(factoextra)
}
fviz_nbclust(log_df[,2:3], hcut, method = "wss")
fviz_nbclust(log_df[,2:3], hcut, method = "silhouette")
gap_stat <- clusGap(log_df[,2:3], FUN = hcut, nstart = 200,
K.max = 20, B = 50)
fviz_gap_stat(gap_stat)
fviz_cluster(list(cluster = grp, data = log_df[,2:3]))
grp <- cutree(res, k = 1)
fviz_cluster(list(cluster=grp, data = log_df[,2:3]))
grp <- cutree(res, k = 9)
fviz_cluster(list(cluster=grp, data = log_df[,2:3]))
